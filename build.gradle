buildscript {
    repositories {
        mavenLocal()
        repositories {
            maven {
                url = "https://plugins.gradle.org/m2/"
            }
        }
    }
}

plugins {
    id "java-library"
    id "idea"
    id "eclipse"
    id "maven-publish"
    id "signing"
    id "com.github.sherter.google-java-format" version "${googleJavaFormatVersion}"
}

defaultTasks 'clean', 'test', 'build'
description = 'Gradle configuration for Language Detection'

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

java {
  sourceCompatibility = "${libraryJavaVersion}"
  targetCompatibility = "${libraryJavaVersion}"
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = "https://maven.restlet.talend.com"
    }
}

ext {
    githubPackagesToken = project.findProperty("githubPackagesToken") ?: ""
}

apply from: "$rootDir/conf/gradle/tests.gradle"

dependencies {
    implementation "com.google.code.gson:gson:2.12.1"
    testImplementation "junit:junit:${junitVersion}"

    benchmarkTestImplementation "org.slf4j:slf4j-nop:2.0.17"
    benchmarkTestImplementation "com.github.pemistahl:lingua:1.2.2"
    benchmarkTestImplementation "io.github.azagniotov:language-detection:12.4.1"
    benchmarkTestImplementation "com.optimaize.languagedetector:language-detector:0.6"
    benchmarkTestImplementation "org.apache.tika:tika-core:3.1.0"
    benchmarkTestImplementation "org.apache.tika:tika-langdetect-opennlp:3.1.0"
    benchmarkTestImplementation "org.apache.tika:tika-langdetect-optimaize:3.1.0"
    benchmarkTestImplementation "org.apache.opennlp:opennlp-tools:2.5.3"
    benchmarkTestImplementation "com.github.vinhkhuc:jfasttext:0.5"
}

apply from: "$rootDir/conf/gradle/jacoco.gradle"
apply from: "$rootDir/conf/gradle/jar.gradle"
apply from: "$rootDir/conf/gradle/publish.gradle"
apply from: "$rootDir/conf/gradle/benchmarks.gradle"

tasks.register('copyPreCommitHook', Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from 'pre-commit'
    into '.git/hooks'
    eachFile { file ->
        file.setMode(0755)
        println("Copying pre-commit file to git hooks.")
    }
}
processResources.finalizedBy copyPreCommitHook

googleJavaFormat {
    toolVersion = "${googleJavaFormatToolVersion}"
    exclude '**/distributions/**'
    exclude '**/src/*/resources/**'
}
verifyGoogleJavaFormat.dependsOn(tasks.googleJavaFormat)
