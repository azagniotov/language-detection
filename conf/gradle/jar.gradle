import java.time.Instant
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter
		.ofPattern("yyyy-MM-dd HH:mm:ssZ")
		.withZone(ZoneOffset.systemDefault())

def getVersion = { ->
	def versionFile = file("latest-version.txt")
	if (!versionFile.exists()) {
		return "MISSING-VERSION"
	}
	return versionFile.text.trim()
}


ext {
	thirdPartyDependencies = configurations.runtimeClasspath.resolve().findAll()
}

tasks.withType(Jar).configureEach {
	manifest {
		def manifestClasspath = thirdPartyDependencies.collect { it.name }.join(',')
		attributes(
				"Main-Class": "io.github.azagniotov.language.Main",
				"Class-Path": manifestClasspath,
				"Implementation-Title": project.findProperty("projectName").toString(),
				"Implementation-Version": getVersion(),
				"Implementation-Vendor": project.findProperty("projectDeveloperName").toString(),
				"Built-By": project.findProperty("projectDeveloperName").toString(),
				"Built-Date": DATE_TIME_FORMATTER.format(Instant.now()),
				"Built-With": "gradle-${gradle.gradleVersion}, groovy-${GroovySystem.getVersion()}",
				"Created-By": "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
				"X-Compile-Source-JDK": project.findProperty("libraryJavaVersion").toString(),
				"X-Compile-Target-JDK": project.findProperty("libraryJavaVersion").toString()
		)
	}
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	version = getVersion()
	from sourceSets.main.output
	from(thirdPartyDependencies.collect { zipTree(it) })
	doLast {
		println ":" + name + " Packaged the following dependencies: " + thirdPartyDependencies.collect { File file -> file.name }
	}
}
