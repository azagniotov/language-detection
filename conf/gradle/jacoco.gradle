def execData() {
	return fileTree(layout.buildDirectory.file("jacoco/test.exec").get().asFile)
}

def static analysisExcludes() {
	return []
}

ext {
	analysisExcludes = this.&analysisExcludes
}

apply plugin: "jacoco"

jacoco {
	toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
	getExecutionData().setFrom(execData())
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: analysisExcludes())
		}))
	}
	reports {
		xml.required = true
		html.required = true
	}
}

jacocoTestCoverageVerification {
	getExecutionData().setFrom(execData())
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: analysisExcludes())
		}))
	}
	violationRules {
		rule {
			limit {
				minimum = new BigDecimal("${coverageMinimum}")
			}
		}
	}
}

test {
	finalizedBy jacocoTestReport
}
